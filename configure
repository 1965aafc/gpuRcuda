####################################
# configure for package gpuR
# Charles Determan Jr.

CXX_STD="CXX_STD=CXX11"
#PKG_CXXFLAGS="PKG_CXXFLAGS=-I../inst/include"
CXXFLAGS="CXXFLAGS := -std=c++11 -g -fpic -O3 -Wall -pipe -pedantic -Wno-variadic-macros"

NVCCBIN="/usr/local/cuda-7.0/bin/nvcc"

PKG_LIBS="PKG_LIBS="
LIBS="LIBS="
R_LIBS=`${R_HOME}/bin/R CMD config --ldflags`
RCPP_LIBS=`${R_HOME}/bin/Rscript -e "Rcpp:::CxxFlags()"`
ARMA_LIBS=`${R_HOME}/bin/Rscript -e "RcppArmadillo:::CxxFlags()"`
EIGEN_LIBS=`${R_HOME}/bin/Rscript -e "RcppEigen:::CxxFlags()"`
VCL_LIBS=`${R_HOME}/bin/Rscript -e 'cat(paste("-I", system.file("include", package = "RViennaCL"), sep = ""))'`


R_INCL="-I../inst/include -I/usr/share/R/include ${RCPP_LIBS} ${EIGEN_LIBS} ${ARMA_LIBS} ${VCL_LIBS} "
CU_ARGS="-Xcompiler -fPIC -Xcudafe --diag_suppress=boolean_controlling_expr_is_constant"
CU_INCL="-I/usr/share/R/include -I/usr/include ${VCL_LIBS} ${EIGEN_LIBS}"
CU_ARCH="-arch=sm_30"

DEFAULT_CUDA=/usr/local/cuda

if [ -d "$DEFAULT_CUDA" ]; then
    echo "Default CUDA is installed"
    
    echo "Checking for CUDA_HOME"
    if test -z "$CUDA_HOME"; then
        echo "CUDA_HOME not set by user"
        echo "CUDA_HOME set /usr/local/cuda-7.0"
        CUDA_HOME=/usr/local/cuda-7.0
        CUDA_INC=${CUDA_HOME}/include
        echo "CUDA_INC=" $CUDA_INC
    else
        echo "CUDA_HOME=" $CUDA_HOME
    fi
    
    if test -n "$CUDA_HOME"; then
        R_INCL="${R_INCL} -I${CUDA_HOME}/include"
        LIBS="${LIBS} -L${CUDA_HOME}/lib64 -Wl,-rpath,${CUDA_HOME}/lib64 -lcudart -lcublas"
        PKG_LIBS="${PKG_LIBS} -L${CUDA_HOME}/lib64 -Wl,-rpath,${CUDA_HOME}/lib64 -lcudart -lcublas"
    else
        echo "CUDA_HOME env not defined"
        break
    fi
else
    echo "cuda is not installed"
    break
fi

# echo "${PKG_LIBS}" > src/Makevars
echo "R_LIBS := ${R_LIBS}\n" > src/Makevars
echo "cu_sources := \$(wildcard *cu)" >> src/Makevars
echo "cu_sharedlibs := \$(patsubst %.cu, %.o,\$(cu_sources))\n" >> src/Makevars
echo "cpp_sources := \$(wildcard *.cpp)" >> src/Makevars
echo "cpp_sharedlibs := \$(patsubst %.cpp, %.o, \$(cpp_sources))\n" >> src/Makevars
#echo "OBJS := \$(cu_sharedlibs) \$(cpp_sharedlibs)\n" >> src/Makevars
echo "OBJS := \$(cu_sharedlibs) cudaCode.o \$(cpp_sharedlibs)\n" >> src/Makevars
#echo "OBJS := cudaCode.o\n" >> src/Makevars
# echo "OBJS := \$(cpp_sharedlibs)\n" >> src/Makevars
# echo "OBJECTS := cudaCode.o \$(cpp_sharedlibs)\n" >> src/Makevars
echo "R_INCL := ${R_INCL}\n" >> src/Makevars
echo "CU_ARGS := ${CU_ARGS}" >> src/Makevars
echo "CU_INCL := ${CU_INCL}" >> src/Makevars
echo "CU_ARCH := ${CU_ARCH}\n" >> src/Makevars
echo "CXX=g++" >> src/Makevars
echo "NVCC=${NVCCBIN}\n" >> src/Makevars
echo "${CXXFLAGS}" >> src/Makevars
echo "${LIBS}\n" >> src/Makevars
#echo "${CXX_STD}" >> src/Makevars
#echo "${PKG_CXXFLAGS}" >> src/Makevars
#echo "${PKG_LIBS}\n" >> src/Makevars
echo "all : gpuRcuda.so\n" >> src/Makevars
echo "gpuRcuda.so: \$(OBJS)" >> src/Makevars
echo "\t\t\$(CXX) -shared -o \$@ \$(OBJS) \$(R_LIBS) \$(LIBS)\n" >> src/Makevars
echo "%.o: %.cpp \$(cpp_sources)" >> src/Makevars
echo "\t\t\$(CXX) -c -o \$@ \$< \$(CXXFLAGS) -fPIC \$(LIBS) \$(R_INCL)\n" >> src/Makevars
echo "%.o: %.cu \$(cu_sources)" >> src/Makevars
echo "\t\t\$(NVCC) \$(CU_ARCH) \$(CU_ARGS) \$(CU_INCL) \$< -c\n" >> src/Makevars
echo "cudaCode.o:" >> src/Makevars
echo "\t\t\$(NVCC) \$(CU_ARCH) -dlink -Xcompiler -fPIC \$(cu_sharedlibs) -o \$@\n" >> src/Makevars
echo "clean:" >> src/Makevars
echo "\t\t rm -rf *.o Makevars\n" >> src/Makevars
# echo "PHONY: all" >> src/Makevars
# echo "\t\t@echo hello_world\n" >> src/Makevars
# echo "print-%:" >> src/Makevars
# echo "\t\t@echo '\$*=\$(\$*)'" >> src/Makevars

#OBJS := $(cu_sharedlibs) cudaCode.o

# cudaCode.o: 
#   	$(NVCC) $(CU_ARCH) -Xcompiler -fPIC -dlink (cu_sharedlibs)

# echo "gpuRdcuda.so:" >> src/Makevars
# echo "\t\t\$(NVCC) -arch=sm_30 ">> src/Makevars
#g++ gpuCode.o main.o particle.o v3.o –lcudart –o app

# 
# show:
#   	echo $(PKGOBJ)
# show:
#   	 echo $(CXX) -shared -o $@ $(OBJECTS) $(R_LIBS) $(LIBS)